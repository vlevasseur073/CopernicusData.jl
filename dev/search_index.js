var documenterSearchIndex = {"docs":
[{"location":"release_notes/#Release-notes","page":"Release Notes","title":"Release notes","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"Version:","category":"page"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"using CopernicusData # hide\npkgversion(CopernicusData) # hide","category":"page"},{"location":"release_notes/#Current-release-overview","page":"Release Notes","title":"Current release overview","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"Implementation of data structure to hold the new CopernicusData zarr Sentinels products from the Copernicus mission\nYAXTrees module implements f hierarchical tree structure of YAXArrays or Datasets from YAXArrays.jl package\nImplementation of a light orchestrator to run any kind of processing module from a input payload file: \nread the inputs products\nrun the provided workflows\nstore the output products","category":"page"},{"location":"release_notes/#Status-of-the-package","page":"Release Notes","title":"Status of the package","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"This is a beta release","category":"page"},{"location":"release_notes/#Known-problems-or-limitations","page":"Release Notes","title":"Known problems or limitations","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"Reading zipped zarr is not fully handled. Feature to be requested to Zarr.jl package https://github.com/JuliaIO/Zarr.jl/issues/189. The current Zarrl.ZipStore handles files on the local filesystem not yet files on a cloud storage.","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#CopernicusData.get_AWS_config","page":"API Reference","title":"CopernicusData.get_AWS_config","text":"function get_AWS_config(profile::String=\"default\")\n\nGenerate and AWS config given a profile name. To get the credentials, the function follows the priority as: 1- get aws config and credentials file as INI files in default path: ~/.aws 2- use environement varialbes (AWSSECRETACCESSKEY, AWSACCESSKEYID, ...)\n\n\n\n\n\n","category":"function"},{"location":"api/#CopernicusData.EOProducts.eoproduct_dataset-Tuple{String}","page":"API Reference","title":"CopernicusData.EOProducts.eoproduct_dataset","text":"eoproduct_dataset(path::String)::Dict{String, Dataset}\n\nOpen a Copernicus product returns a Dict{String,Dataset} containing all the Variables stored in the product\n\nExamples\n\njulia> d = open_eoproduct(\"S3SLSLST_20191227T124111_0179_A109_T921.zarr\")\n\n\n\n\n\n","category":"method"},{"location":"api/#CopernicusData.EOProducts.open_eoproduct-Tuple{String}","page":"API Reference","title":"CopernicusData.EOProducts.open_eoproduct","text":"open_eoproduct(path::String)\n\nOpen a Copernicus Zarr product returns a Dict{String,ZArray} containing all the Variables stored in the product\n\nExamples\n\njulia> d = open_eoproduct(\"S3SLSLST_20191227T124111_0179_A109_T921.zarr\")\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.iterate-Tuple{YAXTree, CopernicusData.YAXTrees.YAXTreeIteratorState}","page":"API Reference","title":"Base.iterate","text":"Base.iterate(tree::YAXTree, state::YAXTreeIteratorState)\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.iterate-Tuple{YAXTree}","page":"API Reference","title":"Base.iterate","text":"Base.iterate(tree::YAXTree)\n\nCreates an iterator that traverses the YAXTree in a depth-first, pre-order fashion.\n\nThis iterator yields each node in the tree, ensuring that no node is visited twice, even if children share the same name. The path of each node is used as a unique identifier.\n\nExamples\n\n# Assuming a YAXTree 'my_tree' is defined:\nfor node in my_tree\n    println(node.name, \" at path \", node.path)\nend\n\n\n\n\n\n","category":"method"},{"location":"api/#CopernicusData.YAXTrees.open_datatree","page":"API Reference","title":"CopernicusData.YAXTrees.open_datatree","text":"open_datatree(path::String, driver::Union{Nothing,Symbol}=nothing; name::String=\"root\")::YAXTree\n\nOpen a Copernicus product returns YAXTree\n\nExamples\n\njulia> dt = open_datatree(\"S03SLSLST_20191227T124111_0179_A109_T921.zarr\")\n\n\n\n\n\n","category":"function"},{"location":"api/#CopernicusData.YAXTrees.@map_over_subtrees-Tuple{Any, Any}","page":"API Reference","title":"CopernicusData.YAXTrees.@map_over_subtrees","text":"macro map_over_subtrees(func, tree)\n\nMap a function func over all the nodes of a YAXTree structure which contains a YAXArray or YAXArrays.Datasets.Dataset\n\nExamples\n\n# Assuming a YAXTree 'my_tree' is defined:\nf(tree::YAXTree) = @show tree.name\nYAXTrees.@map_over_subtrees f my_tree\n\n\n\n\n\n","category":"macro"},{"location":"quickstart/#QuickStart","page":"QuickStart","title":"QuickStart","text":"","category":"section"},{"location":"quickstart/","page":"QuickStart","title":"QuickStart","text":"Install the latest version of CopernicusData.jl using the Julia's built-in package manager (accessed by pressing ] in the Julia REPL command prompt):","category":"page"},{"location":"quickstart/","page":"QuickStart","title":"QuickStart","text":"julia> ]\n(v1.10) pkg> add CopernicusData","category":"page"},{"location":"quickstart/","page":"QuickStart","title":"QuickStart","text":"The package can be updated via the package manager by","category":"page"},{"location":"quickstart/","page":"QuickStart","title":"QuickStart","text":"(v1.10) pkg> update CopernicusData","category":"page"},{"location":"quickstart/","page":"QuickStart","title":"QuickStart","text":"warn: Use Julia 1.10 or newer\n","category":"page"},{"location":"examples/#Sentinel-3-zarr-products","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"","category":"section"},{"location":"examples/#OLCI-Level-1","page":"Sentinel-3 zarr products","title":"OLCI Level-1","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"olci_path = joinpath(PRODUCT_PATH, OLCEFR) # hide\nolci_path # hide","category":"page"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"local_path = joinpath(tempdir(),OLCEFR)\nDownloads.download(olci_path, local_path)\nefr = open_datatree(local_path)\nefr","category":"page"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"The product is represented by a hierarchical tree structure YAXTrees.YAXTree","category":"page"},{"location":"examples/#Opening-measurements-data","page":"Sentinel-3 zarr products","title":"Opening measurements data","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"rad = efr.measurements.oa01_radiance\nrad","category":"page"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"The nodes of the YAXTree are YAXArrays.YAXArray or YAXArrays.Dataset","category":"page"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"rad.data","category":"page"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"The underlying data is a CFDiskArray","category":"page"},{"location":"examples/#Plot-data","page":"Sentinel-3 zarr products","title":"Plot data","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"heatmap(rad.data, title=rad.properties[\"long_name\"]) # hide","category":"page"},{"location":"examples/#Open-meteorological-conditions","page":"Sentinel-3 zarr products","title":"Open meteorological conditions","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"meteo = efr.conditions.meteorology","category":"page"},{"location":"examples/#Interpolate-the-atmospheric-temperature-at-p832.2-hPa","page":"Sentinel-3 zarr products","title":"Interpolate the atmospheric temperature at p=832.2 hPa","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"tp = linear_interpolation(meteo, \"atmospheric_temperature_profile\", dims=\"pressure_level\", value=832.2)\nheatmap(tp.data, title=\"pressure_level=832.2 hPa\")","category":"page"},{"location":"examples/#SLSTR-Level-2-LST","page":"Sentinel-3 zarr products","title":"SLSTR Level-2 LST","text":"","category":"section"},{"location":"examples/","page":"Sentinel-3 zarr products","title":"Sentinel-3 zarr products","text":"In construction","category":"page"},{"location":"#CopernicusData.jl","page":"Home","title":"CopernicusData.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CopernicusData.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"CopernicusData is a framework to be used for Earth Observation satellite data processing from the EU Copernicus program, especially the Sentinels Missions. It defines a data structure for managing, storing EO data and a light orchestration framework to implement and chain processing steps.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CopernicusData # hide\nusing Plots # hide\npath=joinpath(dirname(dirname(pathof(CopernicusData))), \"docs/resources/S03SLSLST_20191227T124111_0179_A109_T883.zarr.zip\") # hide\ntree = open_datatree(path) # hide\nreturn nothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"heatmap(tree.measurements.lst.data, title=\"Land Surface Temperature over Brazil seen by Sentinel-3 A\") # hide","category":"page"},{"location":"#The-Data-structure","page":"Home","title":"The Data structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The data structure used in CopernicusData.jl is mostly focused on zarr format,  using Zarr.jl package. The data representation is based on YAXArrays.jl. Though it is designed to handle the Sentinels new EOPF product format, it remains fully generic and can represent any kind of hierarchical data tree structure. Please visit https://eopf.copernicus.eu/eopf/ to have further details about the EOPF data format.","category":"page"},{"location":"#YAXTrees-module","page":"Home","title":"YAXTrees module","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The YAXTrees module provide a hierarchical tree structure of YAXArrays or Datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Below is a basic usage to construct a tree structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"root = YAXTree()\nroot.childA = YAXTree(\"childA\")\nroot.childB = YAXTree(\"childB\")\nroot.childA.grandchild = YAXTree(\"grandchild\")\nroot","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using Zarr backend, a recursive zarr structure representing Copernicus product can be accessed with the open_datatree function. Using the feature from YAXArrays.jl, based on DiskArrays.jl, the data is lazy loaded.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tree = open_datatree(path)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A more detailed view can be displayed","category":"page"},{"location":"","page":"Home","title":"Home","text":"YAXTrees.show_tree(tree; details=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use dictionary or the traditional dot indexing to access any node of the tree structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"tree[\"measurements\"].data","category":"page"},{"location":"","page":"Home","title":"Home","text":"tree.conditions.geometry.solar_zenith_tn","category":"page"},{"location":"#EOProduct-module","page":"Home","title":"EOProduct module","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"***deprecated*** ","category":"page"},{"location":"#Orchestration","page":"Home","title":"Orchestration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A light orchestration is providing by the ̀EOTriggering module.","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"utils.jl\") # hide\ninclude_toml_in_markdown(\"../resources/payload.toml\") #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"payload_file_path=\"../resources/payload.toml\"\nEOTriggering.run(payload_file_path)","category":"page"},{"location":"lst/#LST-processor","page":"LST processor","title":"LST processor","text":"","category":"section"}]
}
